{#
Anywhere we need to inject a non-scalar value, we use to_json instead of to_yaml because it:
1) more reliably includes wrapping {}
2) behaves identically on Python 2 and Python 3
(and all JSON is valid YAML).
#}
apiVersion: v1
kind: Secret
metadata:
  name: "celery-secrets"
  labels:
    app: "celery"
  namespace: "{{ k8s_namespace }}"
type: Opaque
stringData: {{ k8s_worker_container["environment"] | to_json }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "celery-worker"
  namespace: "{{ k8s_namespace }}"
spec:
  selector:
    matchLabels:
      app: "celery-worker"
  replicas: {{ k8s_worker_container["replicas"] }}
  template:
    metadata:
      labels:
        app: "celery-worker"
    spec:
{% if k8s_dockerconfigjson %}
      imagePullSecrets:
      - name: registry-secret
{% else %}
      imagePullSecrets: []
{% endif %}
      containers:
      - name: "celery-worker"
        image: "{{ k8s_worker_container["image"] }}:{{ k8s_worker_container["tag"] }}"
        imagePullPolicy: "{{ k8s_worker_container["image_pull_policy"] }}"
        args: ["celery", "--app={{ k8s_worker_container["celery_app"] }}", "worker", "--workdir=/code", "--loglevel=info"]
        env:
        - name: GET_HOSTS_FROM
          value: dns
        - name: PYTHONPATH
          value: "."
        envFrom:
        - secretRef:
            name: "celery-secrets"
        resources: {{ k8s_worker_container["resources"] | to_json }}
