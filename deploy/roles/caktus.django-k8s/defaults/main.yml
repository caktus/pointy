---
# IMPORTANT!
# ansible-role-django-k8s performs a two-step deploy process.
# First, it uses your (admin) credentials to create a namespace and service account;
# those admin credentials should be defined with a combination of these variables:
# (i.e., in your local ~/.kube/config):
k8s_kube_config: "~/.kube/config"
k8s_kube_context: ""

# Next, after the service account is created, it obtains the authentication token
# from the server and uses that to create the remaining resources in the namespace.
# This allows you to store an encrypted copy of k8s_auth_api_key in version control
# for continous deployment from your CI/CD service, with access only to this namespace.
#
# You'll need to set your k8s_auth_host (Kubernetes API server) and k8s_auth_ssl_ca_cert
# (certificate authority) appropriately; you can obtain these from your ~/.kube/config
# (they should also be stored in the repo, but don't need to be encrypted).
k8s_auth_api_key: ""
k8s_auth_host: ""
k8s_auth_ssl_ca_cert: ""  # should be a file path (relative to deploy.yaml)

# An empty dictionary, or the Python representation of your ~/.docker/config.json,
# which can easily be generated with Ansible. For example, to provide credentials
# for Docker Hub:
# docker_hub_user: myusername
# docker_hub_password: mysupersecretpass
# k8s_dockerconfigjson:
#   auths:
#     https://index.docker.io/v1/:
#       auth: "{{ [docker_hub_user, docker_hub_password] | join(':') | b64encode }}"
k8s_dockerconfigjson: {}

k8s_domain_names:
  - www.example.com

k8s_namespace: "echoserver"

k8s_memcached_enabled: false
k8s_memcached_version: "1.5.19"

k8s_redis_enabled: false
k8s_redis_version: "5.0.6"
k8s_redis_volume_size: "20Gi"

k8s_elasticsearch_enabled: false
k8s_elasticsearch_cluster_name: "app-elasticsearch-cluster"
k8s_elasticsearch_version: "7.5.2"
k8s_elasticsearch_volume_size: "20Gi"
k8s_elasticsearch_replicas: 3
k8s_elasticsearch_resources:
  requests:
    memory: "1Gi"

k8s_environment_variables: {}

k8s_ingress_certificate_issuer: letsencrypt-production

k8s_container_name: web
k8s_container_image: k8s.gcr.io/echoserver
k8s_container_image_pull_policy: IfNotPresent
k8s_container_image_tag: "1.10"
k8s_container_port: 8080
k8s_container_protocol: http
k8s_container_replicas: 2
k8s_container_resources:
  requests:
    memory: "256Mi"
    cpu: "250m"
k8s_container_ingress_annotations: {}
k8s_container_ingress_paths:
  - /
# An empty string, or the contents of a file generated by the `htpasswd` command
k8s_container_htpasswd: ""

k8s_web_containers:
  - name: "{{ k8s_container_name }}"
    image: "{{ k8s_container_image }}"
    image_pull_policy: "{{ k8s_container_image_pull_policy }}"
    tag: "{{ k8s_container_image_tag }}"
    replicas: "{{ k8s_container_replicas }}"
    resources: "{{ k8s_container_resources }}"
    port: "{{ k8s_container_port }}"
    protocol: "{{ k8s_container_protocol }}"
    ingress_annotations: "{{ k8s_container_ingress_annotations }}"
    ingress_paths: "{{ k8s_container_ingress_paths }}"
    environment: "{{ k8s_environment_variables }}"
    htpasswd: "{{ k8s_container_htpasswd }}"

k8s_worker_enabled: false
k8s_worker_image: "{{ k8s_container_image }}"
k8s_worker_image_pull_policy: "{{ k8s_container_image_pull_policy }}"
k8s_worker_image_tag: "{{ k8s_container_image_tag }}"
k8s_worker_replicas: 2
k8s_worker_resources: "{{ k8s_container_resources }}"
k8s_worker_celery_app: ""
k8s_worker_container:
  image: "{{ k8s_worker_image }}"
  image_pull_policy: "{{ k8s_worker_image_pull_policy }}"
  tag: "{{ k8s_worker_image_tag }}"
  replicas: "{{ k8s_worker_replicas }}"
  resources: "{{ k8s_worker_resources }}"
  celery_app: "{{ k8s_worker_celery_app }}"
  environment: "{{ k8s_environment_variables }}"

k8s_worker_beat_enabled: false

k8s_migrations_enabled: true
k8s_migration_command:
  - python
  - manage.py
  - migrate
  - --noinput
  - -v
  - "2"

k8s_templates:
  - name: registry_secret.yaml.j2
    state: "{{ k8s_dockerconfigjson | ternary('present', 'absent') }}"
  - name: redis.yaml.j2
    state: "{{ k8s_redis_enabled | ternary('present', 'absent') }}"
  - name: elasticsearch.yaml.j2
    state: "{{ k8s_elasticsearch_enabled | ternary('present', 'absent') }}"
  - name: memcached.yaml.j2
    state: "{{ k8s_memcached_enabled | ternary('present', 'absent') }}"
  - name: web.yaml.j2
    state: present
  - name: workers.yaml.j2
    state: "{{ k8s_worker_enabled | ternary('present', 'absent') }}"
  - name: workers_beat.yaml.j2
    state: "{{ (k8s_worker_enabled and k8s_worker_beat_enabled) | ternary('present', 'absent') }}"
